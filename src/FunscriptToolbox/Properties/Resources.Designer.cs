//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FunscriptToolbox.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FunscriptToolbox.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///REM ScriptVersion:1.7
        ///
        ///set &quot;path=[[FunscriptToolboxFolder]];%path%&quot;
        ///
        ///:start
        ///echo --- subtitles.create ---
        ///&quot;FunscriptToolbox.exe&quot; ^
        ///		subtitles.create ^
        ///		--config &quot;.\--FSTB-SubtitleGeneratorConfig.json&quot; ^
        ///		--sourcelanguage Japanese ^
        ///		--recursive ^
        ///		--verbose ^
        ///		&quot;*.mp4&quot;
        ///pause
        ///REM Remove REM from the start of the next line to have a looping script (i.e. run tool, press space, run tool, ...)
        ///REM goto start
        ///.
        /// </summary>
        internal static string FSTB_CreateSubtitles_bat {
            get {
                return ResourceManager.GetString("FSTB_CreateSubtitles_bat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///REM ScriptVersion:1.1
        ///
        ///echo How to use:
        ///echo 1. Move new-scene.mp4 and new-scene.funscript to this folder.
        ///echo 2. Start this script.
        ///echo 3. It will extracts the audio from new-scene.mp4 and add the audio signature to the new-scene.funscript.
        ///echo 4. It will allows user to synchronize your .funscript to a different version of the video 
        ///echo    (with the audiosync.createfunscript or audiosync.verifyfunscript).
        ///echo.
        ///
        ///set &quot;path=[[FunscriptToolboxFolder]];%path%&quot;
        ///
        ///FunscriptToolbox
        ///ech [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FSTB_GenericCmd_bat {
            get {
                return ResourceManager.GetString("FSTB_GenericCmd_bat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///REM ScriptVersion:1.0
        ///
        ///echo How to use:
        ///echo 1. Move new-scene.mp4 and new-scene.funscript to this folder.
        ///echo 2. Start this script.
        ///echo 3. It will extracts the audio from new-scene.mp4 and add the audio signature to the new-scene.funscript.
        ///echo 4. It will allows user to synchronize your .funscript to a different version of the video 
        ///echo    (with the audiosync.createfunscript or audiosync.verifyfunscript).
        ///echo.
        ///
        ///set &quot;path=[[FunscriptToolboxFolder]];%path%&quot;
        ///
        ///echo --- audiosync.cr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FSTB_PrepareScriptForRelease_bat {
            get {
                return ResourceManager.GetString("FSTB-PrepareScriptForRelease_bat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///REM ScriptVersion:1.0
        ///
        ///echo How to use:
        ///echo 1. Move scene-to-script.mp4 to this folder.
        ///echo 2. Start this script.
        ///echo 3. It will starts by creating a scene-to-script.mvs-p-frames.mp4, which is a
        ///echo    version of the video optimized to get stable motionvectors (i.e. only P-frames).
        ///echo    This step is using the ffmpegFilter (value: VRLeft, VRMosaic, 2D or a custom filter) and ffmpegHeight parameters.
        ///echo 4. It will then extracts the motion vector from the video and create scene-to-s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FSTB_PrepareVideoForOFS_bat {
            get {
                return ResourceManager.GetString("FSTB-PrepareVideoForOFS_bat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///REM ScriptVersion:1.0
        ///
        ///echo How to use:
        ///echo 1. Move scene.funscript, scene.asig (if .funscript doesn’t include audiosignature) and scene.mp4 to this folder.
        ///echo 2. Start this script.
        ///echo 3a. If your video version is same as the scripter’s version, you’ll see: Audio signatures are SYNCHRONIZED. Script is GOOD.
        ///echo 3b. If your version is different, you’ll see the offsets and this message: Creating synchronized version of the funscript.
        ///echo     and a synchronized version script will have [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FSTB_VerifyDownloadedScripts_bat {
            get {
                return ResourceManager.GetString("FSTB_VerifyDownloadedScripts_bat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --
        ///-- json.lua
        ///--
        ///-- Copyright (c) 2020 rxi
        ///--
        ///-- Permission is hereby granted, free of charge, to any person obtaining a copy of
        ///-- this software and associated documentation files (the &quot;Software&quot;), to deal in
        ///-- the Software without restriction, including without limitation the rights to
        ///-- use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
        ///-- of the Software, and to permit persons to whom the Software is furnished to do
        ///-- so, subject to the following conditions:
        ///--        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string json_lua {
            get {
                return ResourceManager.GetString("json_lua", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- FunscriptToolbox.MotionVectors LUA Wrappper Version 1.0.0
        ///json = require &quot;json&quot;
        ///server_connection = require &quot;server_connection&quot;
        ///virtual_actions = require &quot;virtual_actions&quot;
        ///
        ///-- global var
        ///FTMVSFullPath = &quot;[[FunscriptToolboxExePathInLuaFormat]]&quot;
        ///PluginVersion = &quot;[[PluginVersion]]&quot;
        ///configFullPath = ofs.ExtensionDir() .. &quot;\\config.json&quot;
        ///mvsExtension = &quot;.mvs32&quot;
        ///
        ///config = {}
        ///connection = nil
        ///virtualActions = {}
        ///lastVideoFullPath = nil
        ///lastMvsFullPath = nil
        ///
        ///function init()
        ///    printWithTime(&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string main_lua {
            get {
                return ResourceManager.GetString("main_lua", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- FunscriptToolbox.MotionVectors LUA server_connection
        ///json = require &quot;json&quot;
        ///
        ///local server_connection = {}
        ///
        ///function server_connection:new(FTMVSFullPath, enableLogs)
        ///	local o = { 
        ///		FTMVSFullPath = FTMVSFullPath,
        ///		cantFindFTMVSFullPath = false,
        ///		enableLogs = enableLogs,
        ///		serverProcessHandle = nil,
        ///		requests = {},
        ///		lastTimeTaken = 0,
        ///		serverTimeout = 300,
        ///		status = &apos;&apos;,
        ///		statusTooltip = nil,
        ///		debugMode = true
        ///	}
        ///	if not fileExist(o.FTMVSFullPath) then
        ///		local message = &apos;missing &apos;  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string server_connection_lua {
            get {
                return ResourceManager.GetString("server_connection_lua", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- FunscriptToolbox.MotionVectors LUA virtual_actions
        ///local virtual_actions = {}
        ///
        ///function virtual_actions:new(scriptIdx, config)
        ///	local o = { 
        ///		ScriptIdx = scriptIdx,		
        ///		Config = config,
        ///		FrameDurationInSec = 167,
        ///		GeneratedActionsOriginal = {},
        ///		ActionsInTimeline = nil
        ///	}
        ///	setmetatable(o, {__index = virtual_actions})
        ///	return o
        ///end
        ///
        ///function virtual_actions:init(userAction, actions, frameDurationInMs)
        ///	self.GeneratedActionsOriginal = {}
        ///	self:removeAllVirtualActionsInTimelime(userActi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string virtual_actions_lua {
            get {
                return ResourceManager.GetString("virtual_actions_lua", resourceCulture);
            }
        }
    }
}
